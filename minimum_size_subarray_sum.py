# -*- coding: utf-8 -*-
"""Minimum Size Subarray Sum.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UFYFG4l-qZC6H1GhwLgroNnGp8P7B7xB

Given an array of positive integers nums and a positive integer target, return the minimal length of a
subarray
 whose sum is greater than or equal to target. If there is no such subarray, return 0 instead.



Example 1:

Input: target = 7, nums = [2,3,1,2,4,3]

Output: 2

Explanation: The subarray [4,3] has the minimal length under the problem constraint.

Example 2:

Input: target = 4, nums = [1,4,4]

Output: 1

Example 3:

Input: target = 11, nums = [1,1,1,1,1,1,1,1]

Output: 0
"""

target = 7
nums = [2,3,1,2,4,3]

if target in nums:
  print ('1')

total = 0
left = 0

res = float('inf')

for right in range(len(nums)):

  total = total + nums[right]

  while total >= target:

    res = min(res, right-left+1)
    total = total - nums[left]
    left+=1

print (res) if res!=float('inf') else print ('0')

"""Input: target = 7, nums = [2,3,1,2,4,3]

1. **Initialization:**
   - Initialize `total` to keep track of the current sum of elements.
   - Initialize `left` to 0, which represents the left pointer of the current subarray.
   - Initialize `res` to `float('inf')`, which will store the length of the minimal subarray.

2. **Iterating through the array:**
   - Iterate through the array using a sliding window approach.
   - Start with the `right` pointer at index 0 and move it to the right.

3. **Adding elements to the window:**
   - Add the element at index `right` to the `total`. This updates the sum of the current subarray.
   - Check if the `total` is greater than or equal to the `target`.

4. **Adjusting the window:**
   - If the `total` is greater than or equal to the `target`, it means we have a subarray with a sum meeting the condition.
   - Update `res` to the minimum length of subarrays seen so far (`right - left + 1`).
   - Move the `left` pointer to the right as long as the sum is still greater than or equal to the `target`. This effectively shrinks the window size.

5. **Updating result:**
   - Continue iterating through the array, repeating steps 3-4, until we reach the end of the array or the `right` pointer exceeds the array bounds.

6. **Output:**
   - Finally, check if `res` has been updated from `float('inf')`. If it has, then a subarray meeting the condition exists, and its length is stored in `res`. Print `res`.
   - If `res` remains `float('inf')`, it means no subarray meeting the condition exists. Print '0'.

**Example with Explanation:**

Input: target = 7, nums = [2,3,1,2,4,3]

- **Iteration 1:** (right = 0)
  - total = 2
  - Not greater than or equal to 7

- **Iteration 2:** (right = 1)
  - total = 5
  - Not greater than or equal to 7

- **Iteration 3:** (right = 2)
  - total = 6
  - Not greater than or equal to 7

- **Iteration 4:** (right = 3)
  - total = 8
  - Greater than or equal to 7
  - Adjust window: left = 0
  - Calculate subarray length: 3 - 0 + 1 = 4
  - Update res = 4

- **Iteration 5:** (right = 4)
  - total = 10
  - Greater than or equal to 7
  - Adjust window: left = 1
  - Calculate subarray length: 4 - 1 + 1 = 4
  - Update res = 4

- **Iteration 6:** (right = 5)
  - total = 13
  - Greater than or equal to 7
  - Adjust window: left = 3
  - Calculate subarray length: 5 - 3 + 1 = 3
  - Update res = 3

- **Output:** res = 3

So, the minimal length of a subarray whose sum is greater than or equal to the target is 3.

Solution's link : https://youtu.be/aYqYMIqZx5s?si=mM9JPWcx8wnjv0hm
"""

