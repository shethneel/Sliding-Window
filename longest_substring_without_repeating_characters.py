# -*- coding: utf-8 -*-
"""Longest Substring Without Repeating Characters.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UFYFG4l-qZC6H1GhwLgroNnGp8P7B7xB

Given a string s, find the length of the longest
substring
 without repeating characters.



Example 1:

Input: s = "abcabcbb"

Output: 3

Explanation: The answer is "abc", with the length of 3.

Example 2:

Input: s = "bbbbb"

Output: 1

Explanation: The answer is "b", with the length of 1.

Example 3:

Input: s = "pwwkew"

Output: 3

Explanation: The answer is "wke", with the length of 3.

Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
"""

s = "abcabcbb"

sol = ''
m = 0

for i in range(len(s)):

  if s[i] not in sol:
    sol+=s[i]
    cl = len(sol)
    m = max(m, cl)

  else:
    index = sol.index(s[i])
    sol = sol[index+1:] + s[i]

m

"""This solution is using a sliding window approach to find the length of the longest substring without repeating characters. Let's explain the logic using the example 'vdvf':

1. **Initialization:**
   - Initialize an empty string `sol` to keep track of the current substring without repeating characters.
   - Initialize `m` to 0, which will store the length of the longest substring found so far.

2. **Iterating through the string:**
   - Iterate through the string `s`.

3. **Adding characters to the substring:**
   - If the current character `s[i]` is not in the `sol` substring, add it to `sol`.
   - Calculate the length of the current substring `cl`.
   - Update `m` to the maximum value between `m` and `cl`.

4. **Handling repeated characters:**
   - If the current character `s[i]` is already in the `sol` substring, find its index in `sol`.
   - Update `sol` to remove the characters before the repeated character and include the current character `s[i]`.

5. **Repeat:**
   - Continue iterating through the string, repeating steps 3-4.

6. **Output:**
   - After iterating through the entire string, `m` will hold the length of the longest substring without repeating characters. Return `m`.
"""